#pragma checksum "C:\Users\user\Desktop\Software\Fatih Çakıroğlu Core\SignalR\SignalR.Web\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2f2b1071a2ae02098ea7207845894ea15fd64332"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\user\Desktop\Software\Fatih Çakıroğlu Core\SignalR\SignalR.Web\Views\_ViewImports.cshtml"
using SignalR.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\user\Desktop\Software\Fatih Çakıroğlu Core\SignalR\SignalR.Web\Views\_ViewImports.cshtml"
using SignalR.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2f2b1071a2ae02098ea7207845894ea15fd64332", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"88e304c0afa9a0e898930a78a51a7a36ab26ffc0", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/microsoft/signalr/dist/browser/signalr.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\user\Desktop\Software\Fatih Çakıroğlu Core\SignalR\SignalR.Web\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2f2b1071a2ae02098ea7207845894ea15fd643323852", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script type=""text/javascript"">

        //.configureLogging(signalR.LogLevel.Debug)
        var connection = new signalR.HubConnectionBuilder().withAutomaticReconnect([1000, 1000, 1000, 1000]).withUrl(""https://localhost:5001/MyHub"").build();

        statusShow();
        start();
        //functions
        function statusShow() {
            $(""#conStatus"").text(connection.connectionState);
        }
        function start() {
            connection.start().then(() => {
                statusShow();
                $(""#loading"").hide();

                //connection.invoke(""GetNames"");
                connection.invoke(""GetNamesByGroup"");

            }).catch((err) => {
                console.log(err);
                setTimeout(() => start(), 2000);
            });
        }

        statusShow();

        //subscribes
        connection.onreconnecting(err => {
            $(""#loading"").show();
            statusShow();
        });

        connection.onreconnected");
                WriteLiteral(@"(connectionId => {
            $(""#loading"").hide();
            statusShow();
            console.log(""connectionId"" + connectionId);
        });

        connection.onclose(() => {
            $(""#loading"").hide();
            statusShow();
            start();
        });

        connection.on(""ReceiveClientCount"", (clientCount) => {
            $(""#clientCount"").text(clientCount);
        });

        connection.on(""Notify"", (countText) => {
            $(""#notify"").html(`<div class=""alert alert-success"">${countText}</div>`)
        });

        connection.on(""Error"", (errorText) => {
            alert(errorText);
        });

        connection.on(""ReceiveNames"", (names) => {
            $(""#namesList"").empty();

            names.forEach((item, index) => {
                $(""#namesList"").append(`<li class=""list-group-item"">${item}</li>`);
            });
        });
        connection.on(""ReceiveName"", (name) => {
            $(""#namesList"").append(`<li class=""list-group");
                WriteLiteral(@"-item"">${name}</li>`)
        });

        connection.on(""ReceiveMessageByGroup"", (name, teamId) => {
            let listName;

            if (teamId == 1)
                listName = ""ATeamList"";
            else
                listName = ""BTeamList"";

            $(`#${listName}`).append(`<li class=""list-group-item"">${name}</li>`)
        });

        connection.on(""ReceiveNamesByGroup"", (teams) => {
            teams.forEach((team, index) => {
                let listName;
                console.log(team);
                if (team.teamId == 1)
                    listName = ""ATeamList"";
                else
                    listName = ""BTeamList"";

                team.users.forEach((user, index2) => {
                    $(`#${listName}`).append(`<li class=""list-group-item"">${user.name}</li>`)
                });


            });
        });

        connection.on(""ReceiveProduct"", (product) => {
            console.log(product);
        });


        //clicks
 ");
                WriteLiteral(@"       $(""#btnProduct"").click(() => {
            let product = { ""Id"": 1, ""Name"": ""Kalem"", ""Price"": 100, ""Stock"": 200 };

            connection.invoke(""SendProduct"", product);
        });


        $(""#btnNameSave"").click(() => {
            connection.invoke(""SendName"", $(""#txtName"").val()).catch((err) => {
                console.log(err);
            });
        });

        $(""#btnNameTeam"").click(() => {
            let name = $(""#txtName"").val();

            let teamName = $(""input[type=radio]:checked"").val();

            if (teamName == null) {
                alert(""Takım seçiniz"");
                return;
            }

            connection.invoke(""SendNameByGroup"", name, teamName).catch((err) => {
                console.log(err);
            });
        });

        $(""input[type=radio]"").change(() => {
            let value = $(`input[type=radio]:checked`).val();

            if (value == ""Team A"") {
                connection.invoke(""AddToGroup"", value);
   ");
                WriteLiteral(@"             connection.invoke(""RemoveToGroup"", ""Team B"");
            }
            else {
                connection.invoke(""AddToGroup"", value);
                connection.invoke(""RemoveToGroup"", ""Team A"");
            }

        });
    </script>
");
            }
            );
            WriteLiteral(@"
<div class=""row"">
    <div class=""col-md-8 offset-2"">
        <input class=""form-control"" type=""text"" id=""txtName"" />
        <hr />
        <button class=""btn btn-primary"" id=""btnNameSave"">İsim Kaydet</button>
        <button class=""btn btn-warning"" id=""btnNameTeam"">İsim Kaydet(Takım)</button>

        <button class=""btn btn-danger"" id=""btnProduct"">Ürün Göster</button>
        <br /><br />
        <div class=""alert alert-info mt-2"">
            <div class=""float-left"">
                Bağlantı Durumu:<strong id=""conStatus""></strong>
                ,Client Sayısı:<strong id=""clientCount""></strong>
            </div>
            <div class=""float-right"">
                <div id=""loading"" class=""spinner-border"" role=""status"">
                    <span class=""sr-only"">Loading...</span>
                </div>
            </div>
            <div class=""clearfix""></div>
        </div>
        <div id=""notify""></div>
    </div>
</div>

<div class=""row"">
    <div class=""col-md-8 offset-md");
            WriteLiteral(@"-2"">
        <div class=""form-check form-check-inline"">
            <input class=""form-check-input"" type=""radio"" name=""TeamGroup"" value=""Team A"" />
            <label class=""form-check-label"">A Takımı</label>
        </div>
        <div class=""form-check form-check-inline"">
            <input class=""form-check-input"" type=""radio"" name=""TeamGroup"" value=""Team B"" />
            <label class=""form-check-label"">B Takımı</label>
        </div>
    </div>
    <div class=""col-md-8 offset-2"">
        <div class=""row"">
            <div class=""col-md-6"">
                <h2>A Takımı</h2>
                <ul class=""list-group"" id=""ATeamList""></ul>
            </div>
            <div class=""col-md-6"">
                <div>B Takımı</div>
                <ul class=""list-group"" id=""BTeamList""></ul>
            </div>
        </div>
    </div>
</div>











");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
